<?xml version="1.0"?><st-source><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#dose -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.String); add: (#name -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#type -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#dose -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="volumnOfDistribution:">volumnOfDistribution: anObject"generated by Daskalos"     volumnOfDistribution := (self checkValue: anObject forVariable: #volumnOfDistribution)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="volumnOfDistribution">volumnOfDistribution"generated by Daskalos"     ^volumnOfDistribution</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.</body></methods><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#dose -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>dose:</selector></remove-selector><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.</body></methods><remove-selector><class-id>Drug</class-id> <selector>volumnOfDistribution</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>volumnOfDistribution:</selector></remove-selector><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing	</body></methods><remove-selector><class-id>Drug</class-id> <selector>Swallowing</selector></remove-selector><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing	</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><remove-selector><class-id>Infection</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>name:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>type:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>initialize</selector></remove-selector><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     type := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>type</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>type</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new))</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.</body></methods><remove-selector><class-id>Infection</class-id> <selector>initialize</selector></remove-selector><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#reaction -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     reaction := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>reaction</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>reaction</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Chemicals</class-id> <selector>reaction</selector></remove-selector><remove-selector><class-id>Chemicals</class-id> <selector>reaction:</selector></remove-selector><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction	</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialTreatment">SocialTreatment	</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyTreatment">FamilyTreatment	</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment	</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare	</body></methods><remove-selector><class-id>Treatment</class-id> <selector>FamilyTreatment</selector></remove-selector><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare	</body></methods><remove-selector><class-id>Treatment</class-id> <selector>SocialTreatment</selector></remove-selector><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma	</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>Chemicals</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><class><name>ProblemOfDrugUse</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>ProblemOfDrugUse</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ProblemOfDrugUse class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>ProblemOfDrugUse</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name ages </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ProblemOfDrugUse class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#ages -&gt; Core.String); yourself)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ages:">ages: anObject"generated by Daskalos"     ages := (self checkValue: anObject forVariable: #ages)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ages">ages"generated by Daskalos"     ^ages</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     ages := nil.</body></methods><methods><class-id>ProblemOfDrugUse class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#ages -&gt; Core.Number); yourself)</body></methods><remove-selector><class-id>ProblemOfDrugUse</class-id> <selector>ages:</selector></remove-selector><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ages:">ages: anObject"generated by Daskalos"     ages := (self checkValue: anObject forVariable: #ages)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="ages">ages"generated by Daskalos"     ^ages</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     ages := nil.</body></methods><class><name>ProblemOfDrugUse</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name ages gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>ProblemOfDrugUse class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#ages -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>ProblemOfDrugUse</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     ages := nil.     gender := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ProblemOfDrugUse</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>ProblemOfDrugUse</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>ProblemOfDrugUse removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>Infection</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Country removeFromSystem</do-it><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#region -&gt; Core.String); add: (#city -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.d1 := Drug new.d1 name: 'hashish'.i1 := Infection new.i1 name: 'demency'.d1 infection: i1.AllDrugs add: d1.</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemicals removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Prison removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><do-it>Chemicals removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Infection removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Prison removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."MyCars := Set new.Owners := Set new.p1 := Person new.p1 name:  'Peter'.p1 contact: '56464654'.p1 address: 'Prague'.p1 year: 1990.p2 := Person new.p2 name:  'Jim'.p2 contact: '1212121'.p2 address: 'Brno'.p2 year: 1941.p3 := Person new.p3 name:  'Mike'.p3 contact: '787878'.p3 address: 'Olomouc'.p3 year: 1982.c1 := Car new.c1 label: 'XW 7898'.c1 type: 'Ford'.c1 year: 2016.c1 owner: p1.c2 := Car new.c2 label: 'MX 454'.c2 type: 'Ford'.c2 year: 1980.c2 owner: p1.c3 := Car new.c3 label: 'HO 98999'.c3 type: 'Kia'.c3 year: 2014.c3 owner: p2.c4 := Car new.c4 label: 'AB 4544'.c4 type: 'Skoda'.c4 year: 1978.c4 owner: p3.MyCars add: c1.MyCars add: c2.MyCars add: c3.MyCars add: c4.Owners add: p1.Owners add: p2.Owners add: p3.</do-it><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemicals removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Prison removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><do-it>Chemicals removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Infection removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Prison removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>Car removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>Car removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><do-it>Chemicals removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Infection removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Prison removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>Car removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#type -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#enzymes -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>infection</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>infection:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>volumnOfDistribution</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>volumnOfDistribution</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#enzymes -&gt; Core.String); add: (#name -&gt; Core.String); add: (#dose -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>enzymes</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>enzymes</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#dose -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>enzymes</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>enzymes:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dose</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dose</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>dose</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>dose:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><remove-selector><class-id>Drug</class-id> <selector>Inhale</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Injected</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>name:</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Smoking</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Sniffing</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Swallowing</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>type:</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>initialize</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>age</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>age:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Amnesia</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Coma</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>gender:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>gender</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Hallucinations</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>LossOfConsciousness</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>name:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Nausea</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Sweating</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>type:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>initialize</selector></remove-selector><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     age := nil.     gender := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>age</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>age</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#dose -&gt; Core.Number); add: (#volumnOfDistribution -&gt; Core.Number); add: (#enzymes -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>infection</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>infection:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>volumnOfDistribution</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>volumnOfDistribution</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#enzymes -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     infection := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>enzymes</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>enzymes</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); add: (#dose -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>enzymes</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>enzymes:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     infection := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dose</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>dose</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>dose</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>dose:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>age</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>age</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Infection</class-id> <selector>age</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>age:</selector></remove-selector><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     gender := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>type</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>type</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Infection</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>type:</selector></remove-selector><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><remove-selector><class-id>Infection</class-id> <selector>Amnesia</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Coma</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>gender</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>gender:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Hallucinations</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>LossOfConsciousness</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>name:</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Nausea</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>Sweating</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>initialize</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>infection</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>infection:</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Inhale</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Injected</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>name:</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Smoking</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Sniffing</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>Swallowing</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>type:</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>initialize</selector></remove-selector><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#duration -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     duration := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>duration</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>duration</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Infection</class-id> <selector>duration</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>duration:</selector></remove-selector><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#gender -&gt; Core.Object); yourself)</body></methods><remove-selector><class-id>Infection</class-id> <selector>gender:</selector></remove-selector><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Coma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Prison removeFromSystem</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Coma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Coma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Coma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Coma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Coma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.d3 infection: i3.d3 infection: i8.d3 infection: i9.d3 infection: i10.d3 infection: i11.d3 infection: i12.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.d3 infection: i3.d4 infection: i8.d5 infection: i9.d1 infection: i10.d2 infection: i11.d3 infection: i12.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.AllInfection add: i13.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.d3 infection: i3.d4 infection: i8.d5 infection: i9.d1 infection: i10.d2 infection: i11.d3 infection: i12.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.AllInfection add: i13.</do-it><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.AllInfection add: i13.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemicals removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname address birthdate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#birthdate -&gt; Core.Date); add: (#firstname -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>Instances of this class stores info about persons.Each person knows its name (firstname &amp; surname), address and birthdate.Attribute of each person has also age, but this attribute is made by method.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate">birthdate"generated by Daskalos"     ^birthdate</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].     birthdate := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #firstname. ^nil].     firstname := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     address := nil.     birthdate := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="age">agebirthdate isNil	ifTrue: [^nil]	ifFalse: [^((Date today subtractDate: birthdate) / 365.2422) truncated]</body></methods><class><name>Doctor</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specialization visitations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#visitations -&gt; Core.Set); add: (#birthdate -&gt; Core.Date); add: (#specialization -&gt; Core.String); yourself)</body></methods><comment><class-id>Doctor</class-id><body>Concrete subclass of class Person, which add specific behavior for persons being medical doctors. note that a doctor may be a patient as well.</body></comment><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #specialization. ^nil].     specialization := anObject</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitations">visitations"generated by Daskalos"     ^visitations</body></methods><methods><class-id>Doctor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     specialization := nil.     visitations := Set new.</body></methods><class><name>Visitation</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doctor patient visitDate diagnosis nextVisitDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitation class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#doctor -&gt; Core.Object); add: (#nextVisitDate -&gt; Core.Date); add: (#diagnosis -&gt; Core.String); add: (#visitDate -&gt; Core.Date); add: (#patient -&gt; Core.Object); yourself)</body></methods><comment><class-id>Visitation</class-id><body>This is class having instances, which stores data about visitation of some person at some doctor.</body></comment><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis">diagnosis"generated by Daskalos"     ^diagnosis</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis:">diagnosis: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #diagnosis. ^nil].     diagnosis := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor">doctor"generated by Daskalos"     ^doctor</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor:">doctor: anObject"generated by Daskalos"     doctor := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate">nextVisitDate"generated by Daskalos"     ^nextVisitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate:">nextVisitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #nextVisitDate. ^nil].     nextVisitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient">patient"generated by Daskalos"     ^patient</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient:">patient: anObject"generated by Daskalos"     patient := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate">visitDate"generated by Daskalos"     ^visitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate:">visitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #visitDate. ^nil].     visitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     doctor := nil.     patient := nil.     visitDate := nil.     diagnosis := nil.     nextVisitDate := nil.</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname address birthdate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#birthdate -&gt; Core.Date); add: (#firstname -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>Instances of this class stores info about persons.Each person knows its name (firstname &amp; surname), address and birthdate.Attribute of each person has also age, but this attribute is made by method.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate">birthdate"generated by Daskalos"     ^birthdate</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].     birthdate := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #firstname. ^nil].     firstname := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     address := nil.     birthdate := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="age">agebirthdate isNil	ifTrue: [^nil]	ifFalse: [^((Date today subtractDate: birthdate) / 365.2422) truncated]</body></methods><class><name>Doctor</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specialization visitations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#visitations -&gt; Core.Set); add: (#birthdate -&gt; Core.Date); add: (#specialization -&gt; Core.String); yourself)</body></methods><comment><class-id>Doctor</class-id><body>Concrete subclass of class Person, which add specific behavior for persons being medical doctors. note that a doctor may be a patient as well.</body></comment><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #specialization. ^nil].     specialization := anObject</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitations">visitations"generated by Daskalos"     ^visitations</body></methods><methods><class-id>Doctor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     specialization := nil.     visitations := Set new.</body></methods><class><name>Visitation</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doctor patient visitDate diagnosis nextVisitDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitation class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#doctor -&gt; Core.Object); add: (#nextVisitDate -&gt; Core.Date); add: (#diagnosis -&gt; Core.String); add: (#visitDate -&gt; Core.Date); add: (#patient -&gt; Core.Object); yourself)</body></methods><comment><class-id>Visitation</class-id><body>This is class having instances, which stores data about visitation of some person at some doctor.</body></comment><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis">diagnosis"generated by Daskalos"     ^diagnosis</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis:">diagnosis: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #diagnosis. ^nil].     diagnosis := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor">doctor"generated by Daskalos"     ^doctor</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor:">doctor: anObject"generated by Daskalos"     doctor := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate">nextVisitDate"generated by Daskalos"     ^nextVisitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate:">nextVisitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #nextVisitDate. ^nil].     nextVisitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient">patient"generated by Daskalos"     ^patient</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient:">patient: anObject"generated by Daskalos"     patient := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate">visitDate"generated by Daskalos"     ^visitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate:">visitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #visitDate. ^nil].     visitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     doctor := nil.     patient := nil.     visitDate := nil.     diagnosis := nil.     nextVisitDate := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Doctor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Doctor</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Doctor removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Visitation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Visitation</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Visitation removeFromSystem</do-it><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#surname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>This class implements instances, which stores data about persons.Each person knows its name, surname and address.There is polymorphism with class Company without any inheritance.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].     name := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.     address := nil.</body></methods><class><name>Company</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Company class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Company</class-id><body>This class implements instances, which stores data about companies.Each class knows its name and address.There is polymorphism with class Person without any inheritance.</body></comment><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].     name := anObject</body></methods><methods><class-id>Company</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name pricePerUnit producer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pricePerUnit -&gt; Core.Number); add: (#producer -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Product</class-id><body>This class implements instances, which stores data about products.Each product knows its name, price per unit and producer. A producer of a particular product should be an instance of class Company.</body></comment><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].     name := anObject</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pricePerUnit">pricePerUnit"generated by Daskalos"     ^pricePerUnit</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pricePerUnit:">pricePerUnit: anObject"generated by Daskalos"     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #pricePerUnit. ^nil].     pricePerUnit := anObject</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer">producer"generated by Daskalos"     ^producer</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer:">producer: anObject"generated by Daskalos"     producer := anObject</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     pricePerUnit := nil.     producer := nil.</body></methods><class><name>Contract</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>date amount customer product </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Contract class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#product -&gt; Core.Object); add: (#amount -&gt; Core.Number); add: (#customer -&gt; Core.Object); add: (#date -&gt; Core.Date); yourself)</body></methods><comment><class-id>Contract</class-id><body>This class implements instances, which stores data about contracts.Each contract knows date, amount, customer and product.</body></comment><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="amount">amount"generated by Daskalos"     ^amount</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="amount:">amount: anObject"generated by Daskalos"     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #amount. ^nil].     amount := anObject</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="customer">customer"generated by Daskalos"     ^customer</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="customer:">customer: anObject"generated by Daskalos"     customer := anObject</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date">date"generated by Daskalos"     ^date</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date:">date: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #date. ^nil].     date := anObject</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="product">product"generated by Daskalos"     ^product</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="product:">product: anObject"generated by Daskalos"     product := anObject</body></methods><methods><class-id>Contract</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     date := nil.     amount := nil.     customer := nil.     product := nil.</body></methods><methods><class-id>Contract</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="totalPrice">totalPriceamount isNil ifTrue: [^nil].product isNil ifTrue: [^nil].^amount * product pricePerUnit</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     overdose := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     overdose := nil.</body></methods><class><name>Predmet</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>nazev </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Predmet class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#nazev -&gt; Core.String); yourself)</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev">nazev"generated by Daskalos"     ^nazev</body></methods><methods><class-id>Predmet</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nazev:">nazev: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #nazev. ^nil].     nazev := anObject</body></methods><methods><class-id>Predmet</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     nazev := nil.</body></methods><class><name>Zkouska</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>datum znamka predmet </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Zkouska class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#znamka -&gt; Core.Number); add: (#datum -&gt; Core.Date); add: (#predmet -&gt; Core.Object); yourself)</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum">datum"generated by Daskalos"     ^datum</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="datum:">datum: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #datum. ^nil].     datum := anObject</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet">predmet"generated by Daskalos"     ^predmet</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="predmet:">predmet: anObject"generated by Daskalos"     predmet := anObject</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="znamka">znamka"generated by Daskalos"     ^znamka</body></methods><methods><class-id>Zkouska</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="znamka:">znamka: anObject"generated by Daskalos"     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #znamka. ^nil].     znamka := anObject</body></methods><methods><class-id>Zkouska</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     datum := nil.     znamka := nil.     predmet := nil.</body></methods><class><name>Student</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno prijmeni zkousky </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Student class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#prijmeni -&gt; Core.String); add: (#jmeno -&gt; Core.String); add: (#zkousky -&gt; Core.Set); yourself)</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #jmeno. ^nil].     jmeno := anObject</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni">prijmeni"generated by Daskalos"     ^prijmeni</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="prijmeni:">prijmeni: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #prijmeni. ^nil].     prijmeni := anObject</body></methods><methods><class-id>Student</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="zkousky">zkousky"generated by Daskalos"     ^zkousky</body></methods><methods><class-id>Student</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     prijmeni := nil.     zkousky := Set new.</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="prumernaZnamka">prumernaZnamka	^self znamky avg roundTo: 0.01</body></methods><methods><class-id>Student</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="znamky">znamky	^zkousky collect: [:z | z znamka]</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Predmet</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Predmet</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Predmet removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Zkouska</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Zkouska</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Zkouska removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Student</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Student</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Student removeFromSystem</do-it><class><name>Auto</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>typ rokVyroby spz vlastnik </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Auto class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#spz -&gt; Core.String); add: (#vlastnik -&gt; Core.Object); add: (#typ -&gt; Core.String); add: (#rokVyroby -&gt; Core.Number); yourself)</body></methods><comment><class-id>Auto</class-id><body>Toto je trida, ktera implementuje objekty typu Auto</body></comment><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby">rokVyroby"generated by Daskalos"     ^rokVyroby</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="rokVyroby:">rokVyroby: anObject"generated by Daskalos"     rokVyroby := (self checkValue: anObject forVariable: #rokVyroby)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz">spz"generated by Daskalos"     ^spz</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="spz:">spz: anObject"generated by Daskalos"     spz := (self checkValue: anObject forVariable: #spz)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ">typ"generated by Daskalos"     ^typ</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="typ:">typ: anObject"generated by Daskalos"     typ := (self checkValue: anObject forVariable: #typ)</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik">vlastnik"generated by Daskalos"     ^vlastnik</body></methods><methods><class-id>Auto</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="vlastnik:">vlastnik: anObject"generated by Daskalos"     vlastnik := (self checkValue: anObject forVariable: #vlastnik)</body></methods><methods><class-id>Auto</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     typ := nil.     rokVyroby := nil.     spz := nil.     vlastnik := nil.</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garaz">garaz	^vlastnik adresa</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="musiSTK">musiSTK	^self stari &gt;= 5</body></methods><methods><class-id>Auto</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="stari">stari	^Date today year - rokVyroby</body></methods><class><name>Osoba</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>jmeno adresa </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Osoba class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#adresa -&gt; Core.String); add: (#jmeno -&gt; Core.String); yourself)</body></methods><comment><class-id>Osoba</class-id><body>Toto je trida, ktera implementuje objekty typu Osoba</body></comment><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa">adresa"generated by Daskalos"     ^adresa</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="adresa:">adresa: anObject"generated by Daskalos"     adresa := (self checkValue: anObject forVariable: #adresa)</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno">jmeno"generated by Daskalos"     ^jmeno</body></methods><methods><class-id>Osoba</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="jmeno:">jmeno: anObject"generated by Daskalos"     jmeno := (self checkValue: anObject forVariable: #jmeno)</body></methods><methods><class-id>Osoba</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     jmeno := nil.     adresa := nil.</body></methods><do-it>Auto removeFromSystem</do-it><do-it>Osoba removeFromSystem</do-it><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name surname address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#surname -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>This class implements instances, which stores data about persons.Each person knows its name, surname and address.There is polymorphism with class Company without any inheritance.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].     name := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     surname := nil.     address := nil.</body></methods><class><name>Company</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Company class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Company</class-id><body>This class implements instances, which stores data about companies.Each class knows its name and address.There is polymorphism with class Person without any inheritance.</body></comment><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Company</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].     name := anObject</body></methods><methods><class-id>Company</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.</body></methods><class><name>Product</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name pricePerUnit producer </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Product class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#pricePerUnit -&gt; Core.Number); add: (#producer -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><comment><class-id>Product</class-id><body>This class implements instances, which stores data about products.Each product knows its name, price per unit and producer. A producer of a particular product should be an instance of class Company.</body></comment><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #name. ^nil].     name := anObject</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pricePerUnit">pricePerUnit"generated by Daskalos"     ^pricePerUnit</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="pricePerUnit:">pricePerUnit: anObject"generated by Daskalos"     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #pricePerUnit. ^nil].     pricePerUnit := anObject</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer">producer"generated by Daskalos"     ^producer</body></methods><methods><class-id>Product</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="producer:">producer: anObject"generated by Daskalos"     producer := anObject</body></methods><methods><class-id>Product</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     pricePerUnit := nil.     producer := nil.</body></methods><class><name>Contract</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>date amount customer product </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Contract class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#product -&gt; Core.Object); add: (#amount -&gt; Core.Number); add: (#customer -&gt; Core.Object); add: (#date -&gt; Core.Date); yourself)</body></methods><comment><class-id>Contract</class-id><body>This class implements instances, which stores data about contracts.Each contract knows date, amount, customer and product.</body></comment><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="amount">amount"generated by Daskalos"     ^amount</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="amount:">amount: anObject"generated by Daskalos"     (anObject isKindOf: Number) ifFalse: [self class typeErrorFor: #amount. ^nil].     amount := anObject</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="customer">customer"generated by Daskalos"     ^customer</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="customer:">customer: anObject"generated by Daskalos"     customer := anObject</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date">date"generated by Daskalos"     ^date</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="date:">date: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #date. ^nil].     date := anObject</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="product">product"generated by Daskalos"     ^product</body></methods><methods><class-id>Contract</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="product:">product: anObject"generated by Daskalos"     product := anObject</body></methods><methods><class-id>Contract</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     date := nil.     amount := nil.     customer := nil.     product := nil.</body></methods><methods><class-id>Contract</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="totalPrice">totalPriceamount isNil ifTrue: [^nil].product isNil ifTrue: [^nil].^amount * product pricePerUnit</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Company</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Company</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Company removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Product</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Product</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Product removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Contract</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Contract</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Contract removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     overdose := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>overdose</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>overdose</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>overdose</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>overdose:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Infection</class-id> <selector>overdose</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>overdose:</selector></remove-selector><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     overdose := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.d1 overdose: i3.d2 overdose: i4; overdose: i12.d3 overdose: i9; overdose: i3; overdose: i1; overdose: i6; overdose: i11; overdose: i7.d4 overdose: i8.d5 overdose: i2.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.AllInfection add: i13.</do-it><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Drug</class-id> <selector>overdose</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>overdose:</selector></remove-selector><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfection := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.i3 overdose: d1.i4 overdose: d2.i12 overdose: d2.i3 overdose: d3.i1 overdose: d3.i3 overdose: d3.i6 overdose: d3.i11 overdose: d3.i7 overdose: d3.i8 overdose: d4.i2 overdose: d5.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfection add: i1.AllInfection add: i2.AllInfection add: i3.AllInfection add: i4.AllInfection add: i5.AllInfection add: i6.AllInfection add: i7.AllInfection add: i8.AllInfection add: i9.AllInfection add: i10.AllInfection add: i11.AllInfection add: i12.AllInfection add: i13.</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><remove-selector><class-id>Treatment</class-id> <selector>FamilyCare</selector></remove-selector><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#type -&gt; Core.Object); yourself)</body></methods><remove-selector><class-id>Treatment</class-id> <selector>type:</selector></remove-selector><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>type</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>type</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Treatment</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Treatment</class-id> <selector>type:</selector></remove-selector><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     duration := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>duration</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>duration</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Treatment</class-id> <selector>duration</selector></remove-selector><remove-selector><class-id>Treatment</class-id> <selector>duration:</selector></remove-selector><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><remove-selector><class-id>Treatment</class-id> <selector>HospitalTreatment</selector></remove-selector><remove-selector><class-id>Treatment</class-id> <selector>SocialCare</selector></remove-selector><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfections := Set new.AllTreatments := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.t1 := Treatment new.t1 name: 'Cognitive Behavioral Therapy'.t2 := Treatment new.t2 name: 'Motivational Enhancement Therapy'.t3 := Treatment new.t3 name: 'Family Based Treatment'.t4 := Treatment new.t4 name: 'Nafazodone'.t5 := Treatment new.t5 name: 'Fluoxetine'.t6 := Treatment new.t6 name: 'Rehabilitation'.t7 := Treatment new.t7 name: 'Detoxification'.t8 := Treatment new.t8 name: 'Narcotics Anonymous'.t9 := Treatment new.t9 name: 'Individual Counselling'.t10 := Treatment new.t10 name: 'Self-help'.t1 infection: d5; infection: d1.t2 infection: d5.t3 infection: d5; infection: d1; infection: d3.t4 infection: d5.t5 infection: d5.t6 infection: d2.t7 infection: d2; infection: d3.t8 infection: d3.t9 infection: d1.t10 infection: d1.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.i3 overdose: d1.i4 overdose: d4.i12 overdose: d4.i3 overdose: d3.i1 overdose: d3.i3 overdose: d3.i6 overdose: d3.i11 overdose: d3.i7 overdose: d3.i8 overdose: d2.i2 overdose: d5.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfections add: i1.AllInfections add: i2.AllInfections add: i3.AllInfections add: i4.AllInfections add: i5.AllInfections add: i6.AllInfections add: i7.AllInfections add: i8.AllInfections add: i9.AllInfections add: i10.AllInfections add: i11.AllInfections add: i12.AllInfections add: i13.AllTreatments add: t1.AllTreatments add: t2.AllTreatments add: t3.AllTreatments add: t4.AllTreatments add: t5.AllTreatments add: t6.AllTreatments add: t7.AllTreatments add: t8.AllTreatments add: t9.AllTreatments add: t10.</do-it><do-it>Chemicals renameTo: #Chemical</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>combination</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>combination</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Chemical</class-id> <selector>combination</selector></remove-selector><remove-selector><class-id>Chemical</class-id> <selector>combination:</selector></remove-selector><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Chemical</class-id> <selector>type</selector></remove-selector><remove-selector><class-id>Chemical</class-id> <selector>type:</selector></remove-selector><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>name</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>name</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new))</body></methods><remove-selector><class-id>Chemical</class-id> <selector>name</selector></remove-selector><remove-selector><class-id>Chemical</class-id> <selector>name:</selector></remove-selector><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.</body></methods><remove-selector><class-id>Chemical</class-id> <selector>Reaction</selector></remove-selector><remove-selector><class-id>Chemical</class-id> <selector>initialize</selector></remove-selector><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfections := Set new.AllTreatments := Set new.Formula := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.t1 := Treatment new.t1 name: 'Cognitive Behavioral Therapy'.t2 := Treatment new.t2 name: 'Motivational Enhancement Therapy'.t3 := Treatment new.t3 name: 'Family Based Treatment'.t4 := Treatment new.t4 name: 'Nafazodone'.t5 := Treatment new.t5 name: 'Fluoxetine'.t6 := Treatment new.t6 name: 'Rehabilitation'.t7 := Treatment new.t7 name: 'Detoxification'.t8 := Treatment new.t8 name: 'Narcotics Anonymous'.t9 := Treatment new.t9 name: 'Individual Counselling'.t10 := Treatment new.t10 name: 'Self-help'.c1 := Chemical new.c1 molecular: 'C21H30O2'.c2 := Chemical new.c2 molecular: 'C17H21NO4'.c3 := Chemical new.c3 molecular: 'C21H23N05'.c4 := Chemical new.c4 molecular: 'C23H30N205'.c5 := Chemical new.c5 molecular: 'C21H30O2'.t1 infection: d5; infection: d1.t2 infection: d5.t3 infection: d5; infection: d1; infection: d3.t4 infection: d5.t5 infection: d5.t6 infection: d2.t7 infection: d2; infection: d3.t8 infection: d3.t9 infection: d1.t10 infection: d1.c1 reaction: d1.c2 reaction: d2.c3 reaction: d3.c4 reaction: d4.c5 reaction: d5.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.i3 overdose: d1.i4 overdose: d4.i12 overdose: d4.i3 overdose: d3.i1 overdose: d3.i3 overdose: d3.i6 overdose: d3.i11 overdose: d3.i7 overdose: d3.i8 overdose: d2.i2 overdose: d5.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfections add: i1.AllInfections add: i2.AllInfections add: i3.AllInfections add: i4.AllInfections add: i5.AllInfections add: i6.AllInfections add: i7.AllInfections add: i8.AllInfections add: i9.AllInfections add: i10.AllInfections add: i11.AllInfections add: i12.AllInfections add: i13.AllTreatments add: t1.AllTreatments add: t2.AllTreatments add: t3.AllTreatments add: t4.AllTreatments add: t5.AllTreatments add: t6.AllTreatments add: t7.AllTreatments add: t8.AllTreatments add: t9.AllTreatments add: t10.Formula add: c1.Formula add: c2.Formula add: c3.Formula add: c4.Formula add: c5.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>area</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>area</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#region -&gt; Core.String); add: (#city -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Country</class-id> <selector>area</selector></remove-selector><remove-selector><class-id>Country</class-id> <selector>area:</selector></remove-selector><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>region</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>region</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#city -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Country</class-id> <selector>region</selector></remove-selector><remove-selector><class-id>Country</class-id> <selector>region:</selector></remove-selector><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>city</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>city</staticKey> <definitionChange>added</definitionChange></component_static_change><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><remove-selector><class-id>Country</class-id> <selector>city</selector></remove-selector><remove-selector><class-id>Country</class-id> <selector>city:</selector></remove-selector><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfections := Set new.AllTreatments := Set new.Formula := Set new.AllCountries := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.t1 := Treatment new.t1 name: 'Cognitive Behavioral Therapy'.t2 := Treatment new.t2 name: 'Motivational Enhancement Therapy'.t3 := Treatment new.t3 name: 'Family Based Treatment'.t4 := Treatment new.t4 name: 'Nafazodone'.t5 := Treatment new.t5 name: 'Fluoxetine'.t6 := Treatment new.t6 name: 'Rehabilitation'.t7 := Treatment new.t7 name: 'Detoxification'.t8 := Treatment new.t8 name: 'Narcotics Anonymous'.t9 := Treatment new.t9 name: 'Individual Counselling'.t10 := Treatment new.t10 name: 'Self-help'.c1 := Chemical new.c1 molecular: 'C21H30O2'.c2 := Chemical new.c2 molecular: 'C17H21NO4'.c3 := Chemical new.c3 molecular: 'C21H23N05'.c4 := Chemical new.c4 molecular: 'C23H30N205'.c5 := Chemical new.c5 molecular: 'C21H30O2'.cu1 := Country new.cu1 name: 'Afghanistan'.cu2 := Country new.cu2 name: 'Colombia'.cu3 := Country new.cu3 name: 'Thailand'.t1 infection: d5; infection: d1.t2 infection: d5.t3 infection: d5; infection: d1; infection: d3.t4 infection: d5.t5 infection: d5.t6 infection: d2.t7 infection: d2; infection: d3.t8 infection: d3.t9 infection: d1.t10 infection: d1.c1 reaction: d1.c2 reaction: d2.c3 reaction: d3.c4 reaction: d4.c5 reaction: d5.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.i3 overdose: d1.i4 overdose: d4.i12 overdose: d4.i3 overdose: d3.i1 overdose: d3.i3 overdose: d3.i6 overdose: d3.i11 overdose: d3.i7 overdose: d3.i8 overdose: d2.i2 overdose: d5.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfections add: i1.AllInfections add: i2.AllInfections add: i3.AllInfections add: i4.AllInfections add: i5.AllInfections add: i6.AllInfections add: i7.AllInfections add: i8.AllInfections add: i9.AllInfections add: i10.AllInfections add: i11.AllInfections add: i12.AllInfections add: i13.AllTreatments add: t1.AllTreatments add: t2.AllTreatments add: t3.AllTreatments add: t4.AllTreatments add: t5.AllTreatments add: t6.AllTreatments add: t7.AllTreatments add: t8.AllTreatments add: t9.AllTreatments add: t10.Formula add: c1.Formula add: c2.Formula add: c3.Formula add: c4.Formula add: c5.AllCountries add: cu1.AllCountries add: cu2.AllCountries add: cu3.</do-it><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>"Note that variables begining with uppercase letter will be moved into the workspace pool."AllDrugs := Set new.AllInfections := Set new.AllTreatments := Set new.Formula := Set new.AllCountries := Set new.d1 := Drug new.d1 name: 'Hashish'.d1 type: 'Plant'.d2 := Drug new.d2 name: 'Cocaine'.d2 type: 'Chemical'.d3 := Drug new.d3 name: 'Heroin'.d3 type: 'Chemical'.d4 := Drug new.d4 name: 'Kratom'.d4 type: 'Natural'.d5 := Drug new.d5 name: 'Cannabis'.d5 type: 'Natural'.i1 := Infection new.i1 name: 'Sweating'.i1 gender: 'Both MaleFemale'.i2 := Infection new.i2 name: 'Loss of Consciousness'.i2 gender: 'Both Male Female'.i3 := Infection new.i3 name: 'Comma'.i3 gender: 'Both Male Female'.i4 := Infection new.i4 name: 'Nausea'.i4 gender: 'Both Male Female'.i5 := Infection new.i5 name: 'Hallucinations'.i5 gender: 'Both Male Female'.i6 := Infection new.i6 name: 'Cancer'.i6 gender: 'Both Male Female'.i7 := Infection new.i7 name: 'Intense Feeling'.i7 gender: 'Both Male Female'.i8 := Infection new.i8 name: 'Death'.i8 gender: 'Both Male Female'.i9 := Infection new.i9 name: 'Muscle Spasms'.i9 gender: 'Both Male Female'.i10 := Infection new.i10 name: 'Depression'.i10 gender: 'Both Male Female'.i11 := Infection new.i11 name: 'Breathing Problem'.i11 gender: 'Both Male Female'.i12 := Infection new.i12 name: 'Hepatitis'.i12 gender: 'Both Male Female'.i13 := Infection new.i13 name: 'Dizziness'.i13 gender: 'Both Male Female'.t1 := Treatment new.t1 name: 'Cognitive Behavioral Therapy'.t2 := Treatment new.t2 name: 'Motivational Enhancement Therapy'.t3 := Treatment new.t3 name: 'Family Based Treatment'.t4 := Treatment new.t4 name: 'Nafazodone'.t5 := Treatment new.t5 name: 'Fluoxetine'.t6 := Treatment new.t6 name: 'Rehabilitation'.t7 := Treatment new.t7 name: 'Detoxification'.t8 := Treatment new.t8 name: 'Narcotics Anonymous'.t9 := Treatment new.t9 name: 'Individual Counselling'.t10 := Treatment new.t10 name: 'Self-help'.c1 := Chemical new.c1 molecular: 'C21H30O2'.c2 := Chemical new.c2 molecular: 'C17H21NO4'.c3 := Chemical new.c3 molecular: 'C21H23N05'.c4 := Chemical new.c4 molecular: 'C23H30N205'.c5 := Chemical new.c5 molecular: 'C21H30O2'.cu1 := Country new.cu1 name: 'Afghanistan'.cu2 := Country new.cu2 name: 'Colombia'.cu3 := Country new.cu3 name: 'Thailand'.t1 infection: d5; infection: d1.t2 infection: d5.t3 infection: d5; infection: d1; infection: d3.t4 infection: d5.t5 infection: d5.t6 infection: d2.t7 infection: d2; infection: d3.t8 infection: d3.t9 infection: d1.t10 infection: d1.c1 reaction: d1.c2 reaction: d2.c3 reaction: d3.c4 reaction: d4.c5 reaction: d5.d3 infection: i3.d4 infection: i12.d5 infection: i10.d1 infection: i10.d2 infection: i4.i3 overdose: d1.i4 overdose: d4.i12 overdose: d4.i3 overdose: d3.i1 overdose: d3.i3 overdose: d3.i6 overdose: d3.i11 overdose: d3.i7 overdose: d3.i8 overdose: d2.i2 overdose: d5.d1 produce: cu1.d2 produce: cu2.d3 produce: cu1.d4 produce: cu3.d5 produce: cu1.AllDrugs add: d1.AllDrugs add: d2.AllDrugs add: d3.AllDrugs add: d4.AllDrugs add: d5.AllInfections add: i1.AllInfections add: i2.AllInfections add: i3.AllInfections add: i4.AllInfections add: i5.AllInfections add: i6.AllInfections add: i7.AllInfections add: i8.AllInfections add: i9.AllInfections add: i10.AllInfections add: i11.AllInfections add: i12.AllInfections add: i13.AllTreatments add: t1.AllTreatments add: t2.AllTreatments add: t3.AllTreatments add: t4.AllTreatments add: t5.AllTreatments add: t6.AllTreatments add: t7.AllTreatments add: t8.AllTreatments add: t9.AllTreatments add: t10.Formula add: c1.Formula add: c2.Formula add: c3.Formula add: c4.Formula add: c5.AllCountries add: cu1.AllCountries add: cu2.AllCountries add: cu3.</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemical removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>Car removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="infection">infection	</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>infection</do-it><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>Car removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><remove-selector><class-id>Treatment</class-id> <selector>infection</selector></remove-selector><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="infect">infect	</body></methods><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname address birthdate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#birthdate -&gt; Core.Date); add: (#firstname -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>Instances of this class stores info about persons.Each person knows its name (firstname &amp; surname), address and birthdate.Attribute of each person has also age, but this attribute is made by method.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate">birthdate"generated by Daskalos"     ^birthdate</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].     birthdate := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #firstname. ^nil].     firstname := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     address := nil.     birthdate := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="age">agebirthdate isNil	ifTrue: [^nil]	ifFalse: [^((Date today subtractDate: birthdate) / 365.2422) truncated]</body></methods><class><name>Doctor</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specialization visitations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#visitations -&gt; Core.Set); add: (#birthdate -&gt; Core.Date); add: (#specialization -&gt; Core.String); yourself)</body></methods><comment><class-id>Doctor</class-id><body>Concrete subclass of class Person, which add specific behavior for persons being medical doctors. note that a doctor may be a patient as well.</body></comment><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #specialization. ^nil].     specialization := anObject</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitations">visitations"generated by Daskalos"     ^visitations</body></methods><methods><class-id>Doctor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     specialization := nil.     visitations := Set new.</body></methods><class><name>Visitation</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doctor patient visitDate diagnosis nextVisitDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitation class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#doctor -&gt; Core.Object); add: (#nextVisitDate -&gt; Core.Date); add: (#diagnosis -&gt; Core.String); add: (#visitDate -&gt; Core.Date); add: (#patient -&gt; Core.Object); yourself)</body></methods><comment><class-id>Visitation</class-id><body>This is class having instances, which stores data about visitation of some person at some doctor.</body></comment><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis">diagnosis"generated by Daskalos"     ^diagnosis</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis:">diagnosis: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #diagnosis. ^nil].     diagnosis := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor">doctor"generated by Daskalos"     ^doctor</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor:">doctor: anObject"generated by Daskalos"     doctor := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate">nextVisitDate"generated by Daskalos"     ^nextVisitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate:">nextVisitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #nextVisitDate. ^nil].     nextVisitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient">patient"generated by Daskalos"     ^patient</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient:">patient: anObject"generated by Daskalos"     patient := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate">visitDate"generated by Daskalos"     ^visitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate:">visitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #visitDate. ^nil].     visitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     doctor := nil.     patient := nil.     visitDate := nil.     diagnosis := nil.     nextVisitDate := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Doctor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Doctor</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Doctor removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Visitation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Visitation</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Visitation removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="care">care	</body></methods><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>Car removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="infected">infected	</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>lessinfected</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>lessinfected</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="infected">infected	^infection = 'Nausea' | lessinfected</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="infected">infected	^infection = 'Nausea' | lessinfected</body></methods><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Chemicals</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type combination </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemicals class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#combination -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination">combination"generated by Daskalos"     ^combination</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="combination:">combination: anObject"generated by Daskalos"     combination := (self checkValue: anObject forVariable: #combination)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Chemicals</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Chemicals</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     combination := nil.</body></methods><methods><class-id>Chemicals</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Reaction">Reaction</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type duration </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#duration -&gt; Core.String); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="FamilyCare">FamilyCare</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="HospitalTreatment">HospitalTreatment</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="SocialCare">SocialCare</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration">duration"generated by Daskalos"     ^duration</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="duration:">duration: anObject"generated by Daskalos"     duration := (self checkValue: anObject forVariable: #duration)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     duration := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type age gender </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#age -&gt; Core.Number); add: (#gender -&gt; Core.String); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age">age"generated by Daskalos"     ^age</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="age:">age: anObject"generated by Daskalos"     age := (self checkValue: anObject forVariable: #age)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     age := nil.     gender := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Amnesia">Amnesia</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Coma">Coma</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Hallucinations">Hallucinations</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="LossOfConsciousness">LossOfConsciousness</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Nausea">Nausea</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sweating">Sweating</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name city region area </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#city -&gt; Core.String); add: (#area -&gt; Core.String); add: (#region -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area">area"generated by Daskalos"     ^area</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="area:">area: anObject"generated by Daskalos"     area := (self checkValue: anObject forVariable: #area)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city">city"generated by Daskalos"     ^city</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="city:">city: anObject"generated by Daskalos"     city := (self checkValue: anObject forVariable: #city)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region">region"generated by Daskalos"     ^region</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="region:">region: anObject"generated by Daskalos"     region := (self checkValue: anObject forVariable: #region)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     city := nil.     region := nil.     area := nil.</body></methods><class><name>Prison</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Prison class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Prison</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Prison</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type dose enzymes volumnOfDistribution infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#dose -&gt; Core.Number); add: (#infection -&gt; Core.Object); add: (#type -&gt; Core.String); add: (#enzymes -&gt; Core.String); add: (#volumnOfDistribution -&gt; Core.Number); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose">dose"generated by Daskalos"     ^dose</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="dose:">dose: anObject"generated by Daskalos"     dose := (self checkValue: anObject forVariable: #dose)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes">enzymes"generated by Daskalos"     ^enzymes</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="enzymes:">enzymes: anObject"generated by Daskalos"     enzymes := (self checkValue: anObject forVariable: #enzymes)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     dose := nil.     enzymes := nil.     volumnOfDistribution := nil.     infection := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Inhale">Inhale</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Injected">Injected</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Smoking">Smoking</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Sniffing">Sniffing</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="Swallowing">Swallowing</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemicals</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemicals removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Infection removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Prison</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Prison removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Set); yourself)</body></methods><remove-selector><class-id>Treatment</class-id> <selector>infection:</selector></remove-selector><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := Set new.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemical removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	</body></methods><remove-selector><class-id>Infection</class-id> <selector>highInfected</selector></remove-selector><remove-selector><class-id>Infection</class-id> <selector>lessInfected</selector></remove-selector><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	</body></methods><remove-selector><class-id>Treatment</class-id> <selector>lessInfected</selector></remove-selector><remove-selector><class-id>Treatment</class-id> <selector>highInfected</selector></remove-selector><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	</body></methods><do-it>highInfected</do-it><remove-selector><class-id>Treatment</class-id> <selector>lessInfected</selector></remove-selector><remove-selector><class-id>Treatment</class-id> <selector>highInfected</selector></remove-selector><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	</body></methods><shared-variable><name>HighInfected</name><environment>Smalltalk</environment><private>false</private><constant>false</constant><category>Workspace Globals</category><attributes><package>(none)</package></attributes></shared-variable><do-it>HighInfected</do-it><remove-selector><class-id>Drug</class-id> <selector>highInfected</selector></remove-selector><remove-selector><class-id>Drug</class-id> <selector>lessInfected</selector></remove-selector><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><remove-selector><class-id>Car</class-id> <selector>isOld</selector></remove-selector><remove-selector><class-id>Car</class-id> <selector>isNew</selector></remove-selector><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x name = 'Dizziness']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x name = 'Dizziness']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x lessInfected]</do-it><do-it>AllInfections select: [:x | x lessInfected]</do-it><do-it>AllInfections select: [:x | x lessInfected]</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemical removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x lessInfected]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x lessInfected]</do-it><do-it>AllInfections select: [:x | x lessInfected]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x name='Dizziness']</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Infection</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Infection removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Treatment</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Treatment removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Chemical</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Chemical removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Country</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Country removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Drug removeFromSystem</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^(name = 'Sweating' | name) = 'Nausea'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><do-it>AllInfections select: [:x | x name='Dizziness']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^((((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Depression' | name)		= 'Muscle Spasms'</body></methods><do-it>AllInfections select: [:x | x name='Hepatitis']</do-it><do-it>AllInfections select: [:x | x name='Dizziness'].</do-it><do-it>AllInfections select: [:x | x name='Hepatitis']</do-it><do-it>AllInfections select: [:x | x name='Hepatitis']</do-it><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><do-it>AllInfections select: [:x | x name='Hepatitis']</do-it><do-it>AllInfections select: [:x | x name='Sweating']</do-it><do-it>AllInfections select: [:x | x name='Muscle Spasms']</do-it><do-it>Infection removeFromSystem</do-it><do-it>Treatment removeFromSystem</do-it><do-it>Chemical removeFromSystem</do-it><do-it>Country removeFromSystem</do-it><do-it>Drug removeFromSystem</do-it><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>firstname surname address birthdate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#birthdate -&gt; Core.Date); add: (#firstname -&gt; Core.String); yourself)</body></methods><comment><class-id>Person</class-id><body>Instances of this class stores info about persons.Each person knows its name (firstname &amp; surname), address and birthdate.Attribute of each person has also age, but this attribute is made by method.</body></comment><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #address. ^nil].     address := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate">birthdate"generated by Daskalos"     ^birthdate</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="birthdate:">birthdate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #birthdate. ^nil].     birthdate := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname">firstname"generated by Daskalos"     ^firstname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="firstname:">firstname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #firstname. ^nil].     firstname := anObject</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname">surname"generated by Daskalos"     ^surname</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="surname:">surname: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #surname. ^nil].     surname := anObject</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     firstname := nil.     surname := nil.     address := nil.     birthdate := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="age">agebirthdate isNil	ifTrue: [^nil]	ifFalse: [^((Date today subtractDate: birthdate) / 365.2422) truncated]</body></methods><class><name>Doctor</name><environment>Smalltalk</environment><super>Person</super><private>false</private><indexed-type>none</indexed-type><inst-vars>specialization visitations </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Doctor class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#surname -&gt; Core.String); add: (#address -&gt; Core.String); add: (#firstname -&gt; Core.String); add: (#visitations -&gt; Core.Set); add: (#birthdate -&gt; Core.Date); add: (#specialization -&gt; Core.String); yourself)</body></methods><comment><class-id>Doctor</class-id><body>Concrete subclass of class Person, which add specific behavior for persons being medical doctors. note that a doctor may be a patient as well.</body></comment><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization">specialization"generated by Daskalos"     ^specialization</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="specialization:">specialization: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #specialization. ^nil].     specialization := anObject</body></methods><methods><class-id>Doctor</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitations">visitations"generated by Daskalos"     ^visitations</body></methods><methods><class-id>Doctor</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     specialization := nil.     visitations := Set new.</body></methods><class><name>Visitation</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>doctor patient visitDate diagnosis nextVisitDate </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Visitation class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#doctor -&gt; Core.Object); add: (#nextVisitDate -&gt; Core.Date); add: (#diagnosis -&gt; Core.String); add: (#visitDate -&gt; Core.Date); add: (#patient -&gt; Core.Object); yourself)</body></methods><comment><class-id>Visitation</class-id><body>This is class having instances, which stores data about visitation of some person at some doctor.</body></comment><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis">diagnosis"generated by Daskalos"     ^diagnosis</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="diagnosis:">diagnosis: anObject"generated by Daskalos"     (anObject isKindOf: String) ifFalse: [self class typeErrorFor: #diagnosis. ^nil].     diagnosis := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor">doctor"generated by Daskalos"     ^doctor</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="doctor:">doctor: anObject"generated by Daskalos"     doctor := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate">nextVisitDate"generated by Daskalos"     ^nextVisitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="nextVisitDate:">nextVisitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #nextVisitDate. ^nil].     nextVisitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient">patient"generated by Daskalos"     ^patient</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="patient:">patient: anObject"generated by Daskalos"     patient := anObject</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate">visitDate"generated by Daskalos"     ^visitDate</body></methods><methods><class-id>Visitation</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="visitDate:">visitDate: anObject"generated by Daskalos"     (anObject isKindOf: Date) ifFalse: [self class typeErrorFor: #visitDate. ^nil].     visitDate := anObject</body></methods><methods><class-id>Visitation</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     doctor := nil.     patient := nil.     visitDate := nil.     diagnosis := nil.     nextVisitDate := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Doctor</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Doctor</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Doctor removeFromSystem</do-it><do-it>Person removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Visitation</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Visitation</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Visitation removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><do-it>AllInfections select: [:x | x name='Nausea']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	((name = 'Sweating' &amp; name) = 'Nausea' &amp; name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	name = 'Sweating' name = 'Nausea' name = 'Dizziness'</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self		ifTrue: [((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self isTrue: [name = 'Sweating' name = 'Nausea' name = 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self isTrue: [name = 'Sweating' name = 'Nausea' name = 'Dizziness']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self isTrue: [name = 'Sweating' name = 'Nausea' name = 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self true isTrue: [name = 'Sweating' name = 'Nausea' name = 'Dizziness']</body></methods><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self true isTrue: [name = 'Sweating' name = 'Nausea' name = 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self isTrue: 			[name = 'Sweating'.			name = 'Nausea'.			name = 'Dizziness']</body></methods><do-it>AllInfections select: [:x | x name='Loss of Consciousness']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self isTrue: 			[name = 'Sweating'.			name = 'Nausea'.			name = 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	true ifTrue: ['Sweating' | 'Nausea' | 'Dizziness']</body></methods><do-it>AllInfections select: [:x | x name='Nausea']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	true ifTrue: ['Sweating' | 'Nausea' | 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self true ifTrue: ['Sweating' | 'Nausea' | 'Dizziness']</body></methods><do-it>AllInfections select: [:x | x name='Nausea']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self true		ifTrue: [((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self true		ifTrue: [((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self		ifTrue: [((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness']</body></methods><do-it>AllInfections select: [:x | x name='Nausea']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^self		ifTrue: [((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><do-it>AllInfections select: [:x | x name='Nausea']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><do-it>AllInfections select: [:x | x name='Nausea']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><do-it>AllInfections select: [:x | x name='Death']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^self		ifTrue: [name = 'Comma']		ifTrue: [name = 'Loss of Consciousness']		ifTrue: [name = 'Cancer']		ifTrue: [name = 'Hallucinations']		ifTrue: [name = 'Death']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^self		ifTrue: [name = 'Comma']		ifTrue: [name = 'Loss of Consciousness']		ifTrue: [name = 'Cancer']		ifTrue: [name = 'Hallucinations']		ifTrue: [name = 'Death']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^self isTrue		ifTrue: [name = 'Comma']		ifTrue: [name = 'Loss of Consciousness']		ifTrue: [name = 'Cancer']		ifTrue: [name = 'Hallucinations']		ifTrue: [name = 'Death']</body></methods><do-it>AllInfections select: [:x | x name='Death']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^self		ifTrue: [name = 'Comma']		ifTrue: [name = 'Loss of Consciousness']		ifTrue: [name = 'Cancer']		ifTrue: [name = 'Hallucinations']		ifTrue: [name = 'Death']</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><do-it>AllInfections select: [:x | x name='Death']</do-it><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: ['C21H23N05' | 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: ['Kratom' | 'Cannabis']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: ['Kratom' | 'Cannabis']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: ['C21H23N05' | 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^self true ifTrue: ['Kratom' | 'Cannabis']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^self true ifTrue: ['Kratom' | 'Cannabis']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^self true ifTrue: ['C21H23N05' | 'C17H21NO4']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^self true ifTrue: ['Kratom' | 'Cannabis']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^self true ifTrue: ['C21H23N05' | 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'Kratom' | molecular) = 'Cannabis']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><do-it>Country addInstVarName: 'produce'</do-it><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAddictive">mostAddictive	^true ifTrue: [produce &gt; 1]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce &gt; 1]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce &gt; 1]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce &gt; Country]</body></methods><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Car</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Car removeFromSystem</do-it><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Person</staticKey> <definitionChange>added</definitionChange></component_static_change><do-it>Person removeFromSystem</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce &gt; Country]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^self produce size &gt; 1</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce size &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce &gt; 1]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce size &gt; 1]</body></methods><do-it>AllDrugs select: [:x | x produce='Afghansthan']</do-it><do-it>AllDrugs select: [:x | x produce='Afghanistan']</do-it><do-it>AllDrugs select: [:x | x produce='Afghanistan']</do-it><do-it>AllDrugs select: [:x | x produce='Afghanistan']</do-it><do-it>AllDrugs select: [:x | x mostAffectedCountry]</do-it><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [Country size &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^self true produce size &gt; 1</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostAffectedCountry">mostAffectedCountry	^true ifTrue: [produce size &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><remove-selector><class-id>Drug</class-id> <selector>mostAffectedCountry</selector></remove-selector><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce &gt; 1]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self high ifTrue: [produce size &gt; produce size]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self high ifTrue: [produce size &gt; produce size]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self high ifTrue: [produce size &gt; produce size]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self high ifTrue: [produce size &gt; produce size]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self true ifTrue: [produce size &gt; produce size]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self high ifTrue: [produce size &gt; produce size]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; produce size]</body></methods><remove-selector><class-id>Drug</class-id> <selector>drugTrafficklingCountry</selector></remove-selector><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><do-it>Country addClassVarName: #produce</do-it><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x produce = self]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x produce = self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x self]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country count select: [:x | x count = self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country count select: [:x | x count = self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country count select: [:x | x count = self]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country name select: [:x | x self]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country allInstances select: [:x | x self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country name select: [:x | x name = self]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^Country name select: [:x | x name = self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><remove-selector><class-id>Country</class-id> <selector>count</selector></remove-selector><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [Drug traffickling size &gt; 1]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [Drug traffickling size &gt; 1]</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [Drug traffickling size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="count">count	^produce size &gt; name</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^self name = produce name</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^self name = produce name</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^self name == produce name</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name size</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name size</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce size name</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^Drug traffickling size &gt; 1</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^Drug size traffickling &gt; 1</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	Drug traffickling size</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^true ifTrue: [produce size &gt; 1]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true ifTrue: ['mediumInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true		ifTrue: 			[((Infection name = 'Depression' | name) = 'Intense Feeling' | name)				= 'Muscle Spasms']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true		ifTrue: 			[((Infection name = 'Depression' | Infection name) = 'Intense Feeling'				| Infection name) = 'Muscle Spasms']</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true		ifTrue: 			[((Infection name = 'Depression' | Infection name) = 'Intense Feeling'				| Infection name) = 'Muscle Spasms']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true		ifTrue: 			[((Infection name = 'Depression' | Infection name) = 'Intense Feeling'				| Infection name) = 'Muscle Spasms']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^((((name = 'Comma' | name) = 'Loss of Consciousness' | name) = 'Cancer'		| name) = 'Hallucinations'		| name) = 'Death'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^((name = 'Sweating' | name) = 'Nausea' | name) = 'Dizziness'</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^(((name = 'Hepatitis' | name) = 'Depression' | name)		= 'Loss of Consciousness' | name)		= 'Muscle Spasms'</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true		ifTrue: 			[((Infection name = 'Depression' | Infection name) = 'Intense Feeling'				| Infection name) = 'Muscle Spasms']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><do-it>AllInfections select: [:x | x name='Death']</do-it><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><do-it>AllInfections select: [:x | x highInfected]</do-it><do-it>AllCountries select: [: x | x drugTrafficklingCountry]</do-it><class><name>Car</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>label type year owner </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Car class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#owner -&gt; Core.Object); add: (#label -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#type -&gt; Core.String); yourself)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label">label"generated by Daskalos"     ^label</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="label:">label: anObject"generated by Daskalos"     label := (self checkValue: anObject forVariable: #label)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner">owner"generated by Daskalos"     ^owner</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="owner:">owner: anObject"generated by Daskalos"     owner := (self checkValue: anObject forVariable: #owner)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Car</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Car</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     label := nil.     type := nil.     year := nil.     owner := nil.</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="garage">garage	^owner address</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isNew">isNew	^self isOld not</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isOld">isOld	^year &lt; 2011</body></methods><methods><class-id>Car</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isVIP">isVIP	^self isNew | owner isRich</body></methods><class><name>Person</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name address contact year </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Person class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#address -&gt; Core.String); add: (#name -&gt; Core.String); add: (#year -&gt; Core.Number); add: (#contact -&gt; Core.String); yourself)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address">address"generated by Daskalos"     ^address</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="address:">address: anObject"generated by Daskalos"     address := (self checkValue: anObject forVariable: #address)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact">contact"generated by Daskalos"     ^contact</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="contact:">contact: anObject"generated by Daskalos"     contact := (self checkValue: anObject forVariable: #contact)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year">year"generated by Daskalos"     ^year</body></methods><methods><class-id>Person</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="year:">year: anObject"generated by Daskalos"     year := (self checkValue: anObject forVariable: #year)</body></methods><methods><class-id>Person</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     address := nil.     contact := nil.     year := nil.</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="cars">cars	^Car allInstances select: [:x | x owner = self]</body></methods><methods><class-id>Person</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="isRich">isRich	^self cars size &gt; 1</body></methods><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>MyCars select: [:x | x year &lt; 2011]</do-it><do-it>MyCars select: [:x | x isVIP not]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^true		ifTrue: 			[((Infection name = 'Depression' | Infection name) = 'Intense Feeling'				| Infection name) = 'Muscle Spasms']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^true ifTrue: ['highInfected']</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^true ifTrue: ['lessInfected']</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Depression' 'Intense Feeling' 'Muscle Spasms') includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Depression' 'Intense Feeling' 'Muscle Spasms') includes: infection</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Depression' 'Intense Feeling' 'Muscle Spasms') includes: infection</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Depression' 'Intense Feeling' 'Muscle Spasms') includes: Infection</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based ' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><do-it>AllTreatments select: [:treat | treat familySupport]</do-it><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluxoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><do-it>AllTreatments select: [:treat | treat mecicalCare]</do-it><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><do-it>AllTreatments select: [:treat | treat mecicalCare]</do-it><do-it>AllTreatments select: [:treat | treat selfHeal]</do-it><do-it>AllTreatments select: [:treat | treat mecicalCare]</do-it><do-it>AllTreatments select: [:treat | treat mecicalCare]</do-it><do-it>AllInfections select: [:x | x name='Death']</do-it><do-it>AllInfections select: [:x | x highInfected]</do-it><do-it>AllCountries select: [: x | x drugTrafficklingCountry]</do-it><do-it>AllCountries select: [: x | x drugTrafficklingCountry]</do-it><do-it>AllTreatments select: [:treat | treat familySupport]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><do-it>AllTreatments select: [:treat | treat selfHeal]</do-it><do-it>AllDrugs select: [:drug | drug type = 'Natural']</do-it><do-it>AllDrugs select: [:drug | drug produce = 'Afghanistan']</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^true ifTrue: [(molecular = 'C21H23N05' | molecular) = 'C17H21NO4']</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><do-it>Formula select: [:f | f herb]</do-it><do-it>Formula select: [:f | f mostHarm]</do-it><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body></methods><do-it>Formula select: [:f | f mostHarm]</do-it><do-it>Formula select: [:f | f herb]</do-it><do-it>Formula select: [:f | f mostHarm]</do-it><do-it>AllCountries select: [: x | x drugTrafficklingCountry]</do-it><do-it>AllCountries select: [: x | x name size&gt;1]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><do-it>AllDrugs select: [:drug | drug type = 'Plant']</do-it><do-it>AllDrugs select: [:drug | drug type = 'Chemical']</do-it><do-it>AllInfections select: [:x | x mediumInfected]</do-it><do-it>AllInfections select: [:x | x lessInfected]</do-it><do-it>AllInfections select: [:x | x lessInfected]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><do-it>AllInfections select: [:x | x name='Death']</do-it><do-it>AllInfections select: [:x | x highInfected]</do-it><do-it>AllDrugs select: [:drug | drug type = 'Natural']</do-it><do-it>AllDrugs select: [:drug | drug type = 'Plant']</do-it><do-it>AllDrugs select: [:drug | drug type = 'Chemical']</do-it><do-it>AllDrugs select: [:drug | drug type = 'Chemical']</do-it><do-it>AllCountries select: [: x | x drugTrafficklingCountry]</do-it><do-it>AllTreatments select: [:treat | treat mecicalCare]</do-it><do-it>Formula select: [:f | f mostHarm]</do-it><do-it>Formula select: [:f | f herb]</do-it><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><class><name>Infection</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name gender overdose </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Infection class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Infection</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body></methods><methods><class-id>Infection</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body></methods><methods><class-id>Infection</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body></methods><class><name>Treatment</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name infection </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Treatment class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Treatment</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Treatment</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body></methods><methods><class-id>Treatment</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body></methods><class><name>Chemical</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>molecular reaction </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Chemical class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body></methods><methods><class-id>Chemical</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body></methods><methods><class-id>Chemical</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body></methods><methods><class-id>Chemical</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body></methods><class><name>Country</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><shared-variable><name>produce</name><environment>Country</environment><private>false</private><constant>false</constant><category>As yet unclassified</category><attributes><package>DaskalosUserClasses</package></attributes></shared-variable><methods><class-id>Country class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Country</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Country</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body></methods><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body></methods><component_static_change><name>System-Name Spaces</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>removed</definitionChange></component_static_change><component_static_change><name>(none)</name> <type>package</type><definitionName>Root.Smalltalk.Kernel.Undeclared</definitionName> <staticKey>Drug</staticKey> <definitionChange>added</definitionChange></component_static_change><methods><class-id>Country</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body></methods><class><name>Drug</name><environment>Smalltalk</environment><super>DaskalosDataObject</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name type infection produce </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>DaskalosUserClasses</category><attributes><package>DaskalosUserClasses</package></attributes></class><methods><class-id>Drug class</class-id> <category>instance variables behavior</category><body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body></methods><methods><class-id>Drug</class-id> <category>accessing</category><body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body></methods><methods><class-id>Drug</class-id> <category>instance initialization</category><body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body></methods><methods><class-id>Drug</class-id> <category>other methods</category><body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body></methods><do-it>AllInfections select: [:x | x highInfected]</do-it>