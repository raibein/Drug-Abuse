<?xml version="1.0"?>

<st-source>
<time-stamp>From VisualWorksÂ® Personal Use Edition, Pre-Release 8.1 (oct14.3) of October 24, 2014 on May 21, 2017 at 5:05:28 PM</time-stamp>


<class>
<name>Infection</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name gender overdose </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Infection class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#gender -&gt; Core.String); add: (#overdose -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Infection</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     gender := nil.     overdose := nil.</body>
</methods>

<methods>
<class-id>Infection</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="gender">gender"generated by Daskalos"     ^gender</body>

<body package="DaskalosUserClasses" selector="gender:">gender: anObject"generated by Daskalos"     gender := (self checkValue: anObject forVariable: #gender)</body>

<body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body>

<body package="DaskalosUserClasses" selector="overdose">overdose"generated by Daskalos"     ^overdose</body>

<body package="DaskalosUserClasses" selector="overdose:">overdose: anObject"generated by Daskalos"     overdose := (self checkValue: anObject forVariable: #overdose)</body>
</methods>

<methods>
<class-id>Infection</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="highInfected">highInfected	^#('Comma' 'Loss of Consciousness' 'Death' 'Cancer' 'Hallucinations' 'Death')		includes: name</body>

<body package="DaskalosUserClasses" selector="lessInfected">lessInfected	^#('Sweating' 'Nausea' 'Dizziness') includes: name</body>

<body package="DaskalosUserClasses" selector="mediumInfected">mediumInfected	^#('Hepatitis' 'Depression' 'Loss of Consciousness' 'Muscle Spasms')		includes: name</body>
</methods>


<class>
<name>Treatment</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name infection </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Treatment class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); add: (#infection -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Treatment</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body>

<body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body>

<body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body>
</methods>

<methods>
<class-id>Treatment</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     infection := nil.</body>
</methods>

<methods>
<class-id>Treatment</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="familySupport">familySupport	^#('Motivational Enhancement Therapy' 'Family Based Treatment' 'Cognitive Behavioral Therapy')		includes: name</body>

<body package="DaskalosUserClasses" selector="mecicalCare">mecicalCare	^#('Nafazodone' 'Detoxification' 'Fluoxetine' 'Narcotics Anonymous' 'Rehabilitation')		includes: name</body>

<body package="DaskalosUserClasses" selector="selfHeal">selfHeal	^#('Motivational Enhancement Therapy' 'Individual Counselling' 'Self-help')		includes: name</body>
</methods>


<class>
<name>Chemical</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>molecular reaction </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Chemical class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#molecular -&gt; Core.String); add: (#reaction -&gt; Core.Object); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Chemical</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="molecular">molecular"generated by Daskalos"     ^molecular</body>

<body package="DaskalosUserClasses" selector="molecular:">molecular: anObject"generated by Daskalos"     molecular := (self checkValue: anObject forVariable: #molecular)</body>

<body package="DaskalosUserClasses" selector="reaction">reaction"generated by Daskalos"     ^reaction</body>

<body package="DaskalosUserClasses" selector="reaction:">reaction: anObject"generated by Daskalos"     reaction := (self checkValue: anObject forVariable: #reaction)</body>
</methods>

<methods>
<class-id>Chemical</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     molecular := nil.     reaction := nil.</body>
</methods>

<methods>
<class-id>Chemical</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="herb">herb	^true ifTrue: [(molecular = 'C23H30N205' | molecular) = 'C21H30O2']</body>

<body package="DaskalosUserClasses" selector="mostHarm">mostHarm	^#('C21H23N05' 'C17H21NO4') includes: molecular</body>
</methods>


<class>
<name>Country</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<shared-variable>
<name>produce</name>
<environment>Country</environment>
<private>false</private>
<constant>false</constant>
<category>As yet unclassified</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</shared-variable>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Country class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Country</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body>
</methods>

<methods>
<class-id>Country</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.</body>
</methods>

<methods>
<class-id>Country</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="drugTrafficklingCountry">drugTrafficklingCountry	^self numCountries size &gt; 1</body>

<body package="DaskalosUserClasses" selector="numCountries">numCountries	^Drug allInstances select: [:x | x produce = self]</body>
</methods>


<class>
<name>Drug</name>
<environment>Smalltalk</environment>
<super>DaskalosDataObject</super>
<private>false</private>
<indexed-type>none</indexed-type>
<inst-vars>name type infection produce </inst-vars>
<class-inst-vars></class-inst-vars>
<imports></imports>
<category>DaskalosUserClasses</category>
<attributes>
<package>DaskalosUserClasses</package>
</attributes>
</class>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Drug class</class-id> <category>instance variables behavior</category>

<body package="DaskalosUserClasses" selector="instVarTypes">instVarTypes"resource for Daskalos"^((Core.Dictionary new) add: (#type -&gt; Core.String); add: (#produce -&gt; Core.Object); add: (#infection -&gt; Core.Object); add: (#name -&gt; Core.String); yourself)</body>
</methods>

<!-- -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -   -->


<methods>
<class-id>Drug</class-id> <category>accessing</category>

<body package="DaskalosUserClasses" selector="infection">infection"generated by Daskalos"     ^infection</body>

<body package="DaskalosUserClasses" selector="infection:">infection: anObject"generated by Daskalos"     infection := (self checkValue: anObject forVariable: #infection)</body>

<body package="DaskalosUserClasses" selector="name">name"generated by Daskalos"     ^name</body>

<body package="DaskalosUserClasses" selector="name:">name: anObject"generated by Daskalos"     name := (self checkValue: anObject forVariable: #name)</body>

<body package="DaskalosUserClasses" selector="produce">produce"generated by Daskalos"     ^produce</body>

<body package="DaskalosUserClasses" selector="produce:">produce: anObject"generated by Daskalos"     produce := (self checkValue: anObject forVariable: #produce)</body>

<body package="DaskalosUserClasses" selector="type">type"generated by Daskalos"     ^type</body>

<body package="DaskalosUserClasses" selector="type:">type: anObject"generated by Daskalos"     type := (self checkValue: anObject forVariable: #type)</body>
</methods>

<methods>
<class-id>Drug</class-id> <category>instance initialization</category>

<body package="DaskalosUserClasses" selector="initialize">initialize"generated by Daskalos"     super initialize.     name := nil.     type := nil.     infection := nil.     produce := nil.</body>
</methods>

<methods>
<class-id>Drug</class-id> <category>other methods</category>

<body package="DaskalosUserClasses" selector="traffickling">traffickling	^produce name</body>
</methods>


</st-source>
